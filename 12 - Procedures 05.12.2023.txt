coleção de comando sql, para otimização de banco de dados

o mais comum é ter somente parâmetros de entrada, mas também pode ter parâmetros de saida
eles não são obrigatórios

uso em integração entre sistemas

functions podem ser chamadas dentro de procedures, entretanto esta errado o contrário

INSERT,DELETE e UPDATE

são chamadas atraves da instrução CALL

CALL nome_procedimento(parametro);

delimiter$
CREATE PROCEDURE nome_procedimento(parâmetros)
begin
   /* corpo /*
end$

IN somente entrada
OUT saida
INOUT entrada e saida

Exemplo:
DELIMITER $
create procedure salarios (in quantidade int, in salario int)
begin
	select salary from employees
    where salary > salario
    order by salary desc limit quantidade;
end$

call salarios(5,30);

--------------------------
Exemplo:
DELIMITER $
create procedure media (in dept int, out mediaSal decimal(8,2))
begin
	select avg(salary) into mediaSal from employees
    where department_id = dept;
end$

call media(60,@total);
select @total;

-------------------------
Exemplo:
DELIMITER $
create procedure SetCounter (inout counter int, in inc int)
begin
	set counter = counter+inc;
end$

set @counter = 1;
call SetCounter(@counter,1);
call SetCounter(@counter,2);
call SetCounter(@counter,5);
select @counter;
-----------------------------------------------------------------
Exercício 01:
create table teste_procedure like employees;
ou
create table teste_procedure(
employee_id int not null auto_increment primary key,
first_name varchar(20),
last_name varchar(25),
email varchar(25),
phone_number varchar(20),
hire_date date,
job_id varchar(10),
salary decimal(8,2),
commission_pct decimal(2,2),
manager_id int,
department_id int);

--------------------
Exercício 02:
delimiter $
Create procedure copiaFunc(in cod int)
begin
	Insert into teste_procedure
        select * from employees where employee_id = cod;
end$
call copiaFunc(175);

--------------------
Exercício 03:
delimiter $
Create Procedure criarIntegrado()
begin	
	Alter table jobs add column integrado int default 0;        
end$
call criarIntegrado();

---------------------
Exercício 04:
delimiter $
Create Procedure attIntegrado(in id varchar(10))
begin
	update jobs set integrado=1 where job_id = id;
end$
call attIntegrado('AC_MRG');

---------------------
Exercício 05:
delimiter $
Create Procedure EmployeesSalario(in id int, out salario decimal(8,2))
begin
	select salary into salario from employees where employee_id = id;
        set @sal = salario;
end$
call EmployeesSalario(117,@sal);
select @sal;
--------------------
Exercício 06:
delimiter $
Create Procedure Salario10(in dept int, out salario decimal(8,2))
begin
	select max(salary)*1.1 into salario from employees where department_id = dept;
        set @sal = salario;
end$
call salario10(60,@sal);
select @sal;

--------------------
Exercício 07:
delimiter $
Create Procedure MediaSalario(in dept int, out salario decimal(8,2))
begin
	select avg(salary) into salario from employees where department_id = dept;
       set @sal = salario;
end$
call MediaSalario(60,@sal);
select @sal;

--------------------
